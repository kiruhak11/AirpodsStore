generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Пользователи
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  cart      Cart[]
  orders    Order[]
  reviews   Review[]
  addresses Address[]

  @@map("users")
}

// Роли пользователей
enum UserRole {
  ADMIN
  MANAGER
  CUSTOMER
}

// Категории товаров
model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  products  Product[]
  discounts Discount[]

  @@map("categories")
}

// Товары
model Product {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  description      String
  shortDescription String?
  price            Decimal  @db.Decimal(10, 2)
  comparePrice     Decimal? @db.Decimal(10, 2)
  costPrice        Decimal? @db.Decimal(10, 2)
  sku              String?  @unique
  barcode          String?
  weight           Decimal? @db.Decimal(8, 2)
  dimensions       String?
  stockQuantity    Int      @default(0)
  isActive         Boolean  @default(true)
  isFeatured       Boolean  @default(false)
  isNew            Boolean  @default(false)
  isBestSeller     Boolean  @default(false)
  sortOrder        Int      @default(0)
  categoryId       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Связи
  category         Category               @relation(fields: [categoryId], references: [id])
  images           ProductImage[]
  variants         ProductVariant[]
  cartItems        Cart[]
  orderItems       OrderItem[]
  reviews          Review[]
  productDiscounts ProductDiscount[]
  specifications   ProductSpecification[]

  @@map("products")
}

// Изображения товаров
model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())

  // Связи
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Варианты товаров (цвет, размер и т.д.)
model ProductVariant {
  id            String   @id @default(cuid())
  name          String
  value         String
  price         Decimal? @db.Decimal(10, 2)
  sku           String?  @unique
  stockQuantity Int      @default(0)
  productId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Связи
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// Технические характеристики
model ProductSpecification {
  id        String @id @default(cuid())
  name      String
  value     String
  productId String
  sortOrder Int    @default(0)

  // Связи
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
}

// Корзина
model Cart {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart")
}

// Заказы
model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String
  status            OrderStatus @default(PENDING)
  subtotal          Decimal     @db.Decimal(10, 2)
  tax               Decimal     @default(0) @db.Decimal(10, 2)
  shipping          Decimal     @default(0) @db.Decimal(10, 2)
  discount          Decimal     @default(0) @db.Decimal(10, 2)
  total             Decimal     @db.Decimal(10, 2)
  currency          String      @default("USD")
  notes             String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  shippingAddressId String
  billingAddressId  String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Связи
  user             User            @relation(fields: [userId], references: [id])
  items            OrderItem[]
  shippingAddress  Address         @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress   Address         @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  payments         Payment[]
  appliedDiscounts OrderDiscount[]

  @@map("orders")
}

// Статусы заказов
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// Элементы заказа
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
  variantId String?

  // Связи
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Адреса
model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Связи
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")

  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
}

// Отзывы
model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Связи
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Система скидок
model Discount {
  id          String       @id @default(cuid())
  name        String
  code        String?      @unique
  type        DiscountType
  value       Decimal      @db.Decimal(10, 2)
  minAmount   Decimal?     @db.Decimal(10, 2)
  maxUses     Int?
  usedCount   Int          @default(0)
  startsAt    DateTime?
  endsAt      DateTime?
  isActive    Boolean      @default(true)
  isAutomatic Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Связи
  categories Category[]
  products   ProductDiscount[]
  orders     OrderDiscount[]

  @@map("discounts")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  BLACK_FRIDAY
}

// Связь товаров со скидками
model ProductDiscount {
  id         String   @id @default(cuid())
  productId  String
  discountId String
  createdAt  DateTime @default(now())

  // Связи
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  discount Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@unique([productId, discountId])
  @@map("product_discounts")
}

// Скидки примененные к заказам
model OrderDiscount {
  id         String   @id @default(cuid())
  orderId    String
  discountId String
  amount     Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())

  // Связи
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discount Discount @relation(fields: [discountId], references: [id])

  @@map("order_discounts")
}

// Платежи
model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  gateway       String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Связи
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  CASH
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// Настройки магазина
model StoreSettings {
  id                    String   @id @default(cuid())
  storeName             String   @default("AirpodsStore")
  storeDescription      String?
  logo                  String?
  favicon               String?
  currency              String   @default("USD")
  taxRate               Decimal  @default(0) @db.Decimal(5, 4)
  shippingCost          Decimal  @default(0) @db.Decimal(10, 2)
  freeShippingThreshold Decimal? @db.Decimal(10, 2)
  contactEmail          String?
  contactPhone          String?
  address               String?
  socialFacebook        String?
  socialInstagram       String?
  socialTwitter         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("store_settings")
}
